import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
from scipy.optimize import minimize

x_data = [0., 0.0149537, 0.0225579, 0.107454, 0.120336, 0.146435, 0.163021, 
  0.181389, 0.1839, 0.202407, 0.225822, 2.93454, 2.93964, 3.95623, 
  4.9608, 4.97715, 5.01211, 5.06095, 5.07319, 5.09784, 5.11125, 
  5.13214, 5.15758, 5.18007, 7.92605, 7.9489, 7.97186, 7.99481, 
  8.01266, 8.03422, 8.05579, 8.09402, 8.11424, 8.15289, 8.17326, 
  8.19834, 8.21355, 8.91428, 8.93248, 8.95315, 8.9712, 8.99197, 
  9.01389, 9.03144, 9.05267, 9.0737, 9.09438, 9.13262, 9.15554, 
  9.17845, 10.032, 10.041, 10.0549, 10.0679, 10.0695, 10.0708, 
  10.0717, 10.0907, 10.106, 10.1136, 10.1365, 10.1518, 10.1747, 
  10.1976, 10.8999, 10.9248, 10.9497, 10.9725, 10.9848, 11.0084, 
  11.0334, 11.0535, 11.0688, 11.0915, 11.1145, 11.1375, 11.1527, 
  11.1757, 11.1912, 12.9559, 12.9682, 12.9931, 13.0083, 13.0287, 
  13.0517, 13.0746, 13.0898, 13.1132, 13.1362, 13.1736, 13.1795, 
  13.1968, 13.2044, 14.9053, 14.928, 14.9433, 14.9662, 14.9891, 
  15.0119, 15.0277, 15.0506, 15.0732, 15.0964, 15.1112, 15.1342, 
  15.1494, 15.1772, 15.2002, 15.8888, 15.9057, 15.9285, 15.9438, 
  15.9667, 16.0124, 16.0277, 16.0506, 16.0734, 16.0888, 16.112, 
  16.1728, 16.1884, 16.1956, 16.2039, 368.003, 368.004, 368.008, 
  368.014, 368.019, 368.035, 368.049, 368.072, 368.095, 368.11, 
  368.137, 368.159, 368.171, 368.194, 368.92, 368.943, 368.966, 
  368.989, 369.004, 369.027, 369.052, 369.073, 369.091, 369.095, 
  369.111, 369.126, 369.134, 369.16, 369.172, 369.944, 369.967, 
  369.99, 370.005, 370.02, 370.028, 370.043, 370.051, 370.066, 
  370.089, 370.138, 370.158, 370.173, 370.197, 370.211, 370.967, 
  370.987, 371.009, 371.024, 371.032, 371.047, 371.055, 371.07, 
  371.112, 371.131, 371.154, 371.177, 371.192, 371.943, 371.969, 
  371.992, 372.004, 372.03, 372.05, 372.073, 372.088, 372.111, 
  372.119, 372.134, 372.157, 372.172, 372.195, 372.21]

y_data = [0.858999, 
  0.881062, 0.870295, 0.754767, 0.774036, 0.706434, 0.695399, 
  0.705097, 0.689985, 0.674999, 0.720135, 0.778045, 0.795206, 
  0.799898, 0.810343, 0.814276, 0.81014, 0.763819, 0.849669, 0.78179, 
  0.793391, 0.771162, 0.747225, 0.792543, 0.324657, 0.320003, 
  0.316801, 0.335145, 0.370418, 0.42896, 0.492477, 0.620814, 0.690536,
   0.794143, 0.830393, 0.8335, 0.812131, 0.792944, 0.815206, 0.845111,
   0.838954, 0.856483, 0.865243, 0.868517, 0.860188, 0.844952, 
  0.86361, 0.855068, 0.877036, 0.859623, 0.865789, 0.874655, 0.882893,
   0.877178, 0.880533, 0.875791, 0.879684, 0.889094, 0.884816, 
  0.88241, 0.886415, 0.883464, 0.888576, 0.883165, 0.73042, 0.784652, 
  0.798159, 0.804278, 0.796338, 0.796967, 0.755412, 0.786656, 
  0.814331, 0.695916, 0.726021, 0.699313, 0.737487, 0.674636, 0.70091,
   0.816331, 0.831941, 0.837638, 0.81707, 0.816833, 0.755987, 
  0.746483, 0.740483, 0.756415, 0.7402, 0.705281, 0.71943, 0.705, 
  0.709726, 0.321636, 0.382177, 0.424597, 0.501615, 0.581099, 
  0.652403, 0.714045, 0.779251, 0.819339, 0.834954, 0.808481, 
  0.774612, 0.725071, 0.733302, 0.740802, 0.79561, 0.81093, 0.827348, 
  0.840635, 0.851328, 0.827654, 0.851586, 0.726007, 0.779164, 
  0.843168, 0.876243, 0.886094, 0.796979, 0.848989, 0.850188, 
  0.905238, 0.931646, 0.855696, 0.935963, 0.841181, 0.863204, 
  0.852233, 0.859854, 0.858056, 0.864579, 0.870052, 0.896549, 
  0.905246, 0.935806, 0.82033, 0.754735, 0.854267, 0.849616, 0.841363,
   0.868696, 0.873844, 0.771462, 0.769402, 0.766071, 0.868053, 
  0.714386, 0.790239, 0.833881, 0.803985, 0.811713, 0.822125, 
  0.820514, 0.81979, 0.825432, 0.808594, 0.827599, 0.821649, 0.827247,
   0.808363, 0.784336, 0.756041, 0.687009, 0.692383, 0.675089, 
  0.805473, 0.823081, 0.815732, 0.827206, 0.810325, 0.831098, 
  0.773856, 0.826477, 0.702485, 0.765179, 0.79947, 0.849263, 0.843208,
   0.568926, 0.809064, 0.874178, 0.880669, 0.918349, 0.894265, 
  0.831392, 0.828594, 0.830486, 0.825835, 0.830966, 0.820742, 
  0.818725, 0.821048, 0.814458]

sig = np.array([0.0008703328117774000, 0.0008659743366941000, 0.0008547374824963000,
0.0007259089644313000, 0.0007413972646948000, 0.0006858408309069000,
0.0006767968312046000, 0.0006856571314801000, 0.0006740742023509000, 
0.0006617740924337000, 0.001405886716445900, 0.0009345448275113000, 
0.001001131207274900, 0.001473047138383100, 0.001290565773811900, 
0.001263037040613200, 0.001192171313588400, 0.001097734127550400, 
0.001192294780108700, 0.001099128179328500, 0.001110923815937500, 
0.001078695901744200, 0.001044189738496700, 0.001093749427788700,
0.0007365939115175000, 0.0007056857772193000, 0.0006593269341935000, 
0.0006553902652575000, 0.0006775598129755000, 0.0007356260930471000, 
0.0007945539874012000, 0.0009294364835198000, 0.0009935559729728000, 
0.001095114476706400, 0.001138306387807200, 0.001147036857426800, 
0.001372756302612500, 0.00135442, 0.001333222293408800, 
0.001290535005089500, 0.00126528, 0.001257765391959600, 
0.001250264935026200, 0.001231324130999900, 0.001213317999588500, 
0.001179025675947800, 0.001193559509547900, 0.001173446225457800, 
0.001189814703363500, 0.001169151234255500, 0.001287768650341400, 
0.001276073578725300, 0.001285878017280200, 0.001282604138977300, 
0.001277956545882800, 0.001271641859990100, 0.001270975648896600, 
0.00128731, 0.001277900780701500, 0.001274052805375100, 
0.001279336356714200, 0.001276853548324700, 0.001281431105331400, 
0.001288961388043600, 0.001442723153619500, 0.001336695237664800, 
0.001231416563727800, 0.001204152207505200, 0.001183427093265400, 
0.001181550982341800, 0.001123459307683100, 0.001145799082263900, 
0.001164369580820400, 0.001007592076986300, 0.001032618355925700, 
0.001008738225852600, 0.001064228861690500, 0.00101064, 
0.001005286854651300, 0.001210808991240900, 0.001221826538001200, 
0.001209514614536700, 0.001163746036031200, 0.001154083804244700, 
0.001069894399241300, 0.001057024096260900, 0.001044060709806600, 
0.001054545875446300, 0.001034031080245900, 0.0009953804125769000, 
0.00101002, 0.001001264618222500, 0.001072490961428500, 
0.0007112279786632000, 0.0007461948726088000, 0.0007668680282682000, 
0.0008434849543901000, 0.0009145959996469000, 0.0009964834966961000, 
0.001042937320830900, 0.001107890974694800, 0.001139593682007800, 
0.001150029127420100, 0.00110727, 0.001071157185520400, 
0.001017603123744600, 0.001026248160973600, 0.001082942007156100, 
0.001451162631201400, 0.001334786229677500, 0.001435451012078800, 
0.001587423481497600, 0.001312788834142700, 0.001260510081125500, 
0.001675740162214200, 0.001100218107056400, 0.001159274895722900, 
0.001730191997830500, 0.002449592521277600, 0.002533550586528300, 
0.001305748660893700, 0.002653974691839300, 0.002605450304946200, 
0.01488534446555350, 0.01423653546044370, 0.00899179, 
0.03852222585517830, 0.01844951926928330, 0.001628853158537200, 
0.001143081657908500, 0.001006697154057500, 0.0009539140340569000, 
0.0009433068162186000, 0.001191049596968600, 0.003957782524367300, 
0.009586979239584600, 0.03180345198391490, 0.002606432397807700, 
0.0020182, 0.001262027060996500, 0.001187547388277800, 
0.001115967491750400, 0.001128693631266900, 0.0009195750205185000, 
0.0008155787238774000, 0.0008068207652223000, 0.0008032395889937000, 
0.0008926258260694000, 0.000759147, 0.000818868, 
0.0008520978213489000, 0.0008258168460217000, 0.03120395462146590, 
0.006458412983186700, 0.0009162824069202000, 0.0008896403022676000, 
0.002921985655007800, 0.004373677898873200, 0.0009469926489332000, 
0.000892844, 0.0008653271917169000, 0.0008399742788815000,
0.0008142191342243000, 0.0008009508333465000, 0.0007358758644627000, 
0.0007478615101011000, 0.0007688992828249000, 0.0009655350361043000, 
0.0009713798350227000, 0.0009719861725086000, 0.0009664414987117000, 
0.0009077451220422000, 0.0009010665303967000, 0.0008829847009735000, 
0.001015186761093500, 0.0007704759255624000, 0.0009417572830191000, 
0.0009915995207209000, 0.001263239080230300, 0.001176725364615200, 
0.001836662894723700, 0.002178831312779300, 0.00351605,
0.004544072522878600, 0.008733105842296600, 0.002364155272274600, 0.0008869567936091000, 0.0008642550331931000, 0.0008689265390655000,
0.0008554799009813000, 0.0008661451555944000, 0.0008484172837847000,
0.0008445226216711000, 0.0008511819513644000, 0.0009003895938451000])
sig *= 50
sig=np.clip(sig,0,0.2)
print(sig)


def lightCurve(t, P, d1, d2, d3, d4, d5, d6, a, b, c, d):
#     d represents the horizontal translation of the graph
    time = (t + d) % P
    if time <= d1:
        return c
    elif time <= d1 + (d2 - d3)/2:
        return (a - c)/((d2 - d3)/2 + d1 - d1)*time + c - (a - c)/((d2 - d3)/2 + d1 - d1)*d1
    elif time <= d1 + (d2 - d3)/2 + d3:
        return a
    elif time <= (d1 + d2):
        return (c - a)/(d1 + d2 - (d1 + (d2 - d3)/2 + d3))*time + a - (c - a)/(d1 + d2 - (d1 + (d2 - d3)/2 + d3))*(d1 + (d2 - d3)/2 + d3)
    elif time <= (d1 + d2 + d4):
        return c
    elif time <= (d1 + d2 + d4 + (d5 - d6)/2):
        return (b - c)/((d5 - d6)/2)*time + c - (b - c)/((d5 - d6)/2)*(d1 + d2 + d4)
    elif time <= (d1 + d2 + d4 + (d5 - d6)/2 + d6):
        return b
    elif time <= (d1 + d2 + d4 + d5):
        return (c - b)/((d5 - d6)/2)*time + c - (c - b)/((d5 - d6)/2)*(d1 + d2 + d4 + d5)
    else:
        return c
    

def chi2(variables):
    P = variables[0]
    d1 = variables[1]
    d2 = variables[2]
    d3 = variables[3]
    d4 = variables[4]
    d5 = variables[5]
    d6 = variables[6]
    a = variables[7]
    b = variables[8]
    c = variables[9]
    d = variables[10]
    sigma = 0
    for i in range(len(x_data)):
        sigma += (y_data[i]-lightCurve(x_data[i], P, d1, d2, d3, d4, d5, d6, a, b, c, d)) ** 2 / sig[i] ** 2
        
    return sigma

res = minimize(chi2, x0=[3.453, 1.4, 0.45, 0.125, 1.1, 0.45, 0.125, 0.32, 0.6, 0.86, 24.7], bounds=((3.3,3.7),(1,2), (0.1, 1),(0.1, 0.5),(0.5,1.5),(0.1,1),(0.1, 0.5),(0.1,0.8),(0.5,0.8),(0.8,1),(20,28)))


# Extract the parameters
P_fit, d1_fit, d2_fit, d3_fit, d4_fit, d5_fit, d6_fit, a_fit, b_fit, c_fit, d_fit = res.x
print(P_fit, d1_fit, d2_fit, d3_fit, d4_fit, d5_fit, d6_fit, a_fit, b_fit, c_fit, d_fit)

print(chi2(res.x))

# Plot the original data and the fitted function
plt.errorbar(x_data, y_data, yerr = sig, fmt='o')
plt.plot(np.linspace(x_data[0],x_data[len(x_data)-1],10000), [lightCurve(n, P_fit, d1_fit, d2_fit, d3_fit, d4_fit, d5_fit, d6_fit, a_fit, b_fit, c_fit, d_fit) for n in np.linspace(x_data[0],x_data[len(x_data)-1],10000)], color='red', label='Fitted Line')
plt.legend()
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Light Curve with Initial Guesses')
plt.show()


#plot points with period
#plt.errorbar(x_data, y_data, yerr = sig, fmt='o')
plt.plot(np.linspace(0,10,10000), [lightCurve(n, P_fit, d1_fit, d2_fit, d3_fit, d4_fit, d5_fit, d6_fit, a_fit, b_fit, c_fit, d_fit) for n in np.linspace(0,10,10000)], color='red', label='Fitted Line')
for i in range(3):
    plt.errorbar([(n % P_fit) + i*P_fit for n in x_data], y_data, yerr = sig, fmt='o')

plt.legend()
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Data folded over a period')

plt.show()
